define("widgets/SourceAppMStatistics/Widget", [
        'dojo/_base/declare',
        'dojo/_base/lang',
        'dojo/_base/array',
        'dojo/dom-construct',
        'dojo/dom',
        'dojo/dom-attr',
        'dojo/dom-class',
        'dojo/dom-style',
        'dojo/on',
        'dojo/topic',
        'dojo/request',
        'dojo/json',
        'dojo/query',
        'dojo/data/ItemFileReadStore',
        'dojo/DeferredList',

        'dijit/_WidgetsInTemplateMixin',
        'dijit/form/DateTextBox',
        'dijit/form/Select',
        'dijit/form/RadioButton',
        'dijit/tree/ForestStoreModel',
        'dijit/Tree',

        'bplz/BaseWidget',
        'bplz/utils/DateUtil',
        'bplz/dijit/LoadingShelter',
        'bplz/dijit/BpAlert',
        'bplz/dijit/TabContainer',
        'bplz/dijit/BpSelectContainer'
    ],
    function(declare, lang, arrayUtils, domConstruct, dom, domAttr, domClass, domStyle,
        on, topic, request, JSON, query, ItemFileReadStore, DeferredList,

        _WidgetsInTemplateMixin, DateTextBox, Select, RadioButton, ForestStoreModel, Tree,

        BaseWidget, DateUtil,
        LoadingShelter, BpAlert, TabContainer, BpSelectContainer) {
        return declare([BaseWidget, _WidgetsInTemplateMixin], {
            baseClass: 'bplz-widget-SourceAppMStatistics',
            selPollutant: 'pm25',
            dayStep: 3,
            chartTitleFt: 54,
            chartSubtFt: 26,
            chartfontSize: 40,

            postCreate: function() {
                this._initConfig();
                this._initDisplayWidget();
            },
            _initConfig: function() {
                this.sDate = new Date();
                this.sDate.setHours(0);
                this.sDate.setMinutes(0);
                this.sDate.setSeconds(0);
                this.sDate.setMilliseconds(0);
                this.sDate = DateUtil.strToDate('2018-02-23');

                var lineColors = ['#d76ac7', '#7c5ac0', '#3858ab', '#67ceb8', '#7fcf5f', '#f0db41', '#fa8b5c', '#fb565a', '#f8d08b', '#84d9f9', '#aad4fd', '#ccaaf4', '#f05f59'];



                this.pm25PieOption = {
                    title: {
                        text: '本地外来',
                        x: 'center',
                        y: 5,
                        textAlign: 'center',
                        textStyle: {
                            fontSize: this.chartTitleFt,
                            fontWeight: 'bolder',
                            color: '#ffea35'
                        }
                    },
                    tooltip: {
                        show: false,
                        trigger: 'item'
                    },
                    legend: {
                        show: false,
                        data: ['来源']
                    },
                    toolbox: {
                        show: false
                    },
                    series: [{
                        name: '来源',
                        type: 'pie',
                        radius: ['20%', '72%'],
                        itemStyle: {
                            normal: {
                                label: {
                                    show: true,
                                    formatter: "{b}\n{d}%",
                                    textStyle: {
                                        //fontWeight: 'bold',
                                        fontSize: this.chartfontSize
                                    }
                                },
                                labelLine: {
                                    show: true,
                                    length: 30
                                }
                            },
                            emphasis: {
                                label: {
                                    show: false
                                }
                            }
                        },
                        data: [
                            { value: 0, name: '本地', itemStyle: { normal: { color: '#7cb5ec', label: { textStyle: { color: '#7cb5ec' } } } } },
                            { value: 0, name: '输送', itemStyle: { normal: { color: '#c08750', label: { textStyle: { color: '#c08750' } } } } }
                        ]
                    }]
                };
                this.pm25PieSourceOption = {
                    title: {
                        text: '本地构成',
                        x: 'center',
                        y: 5,
                        textAlign: 'center',
                        textStyle: {
                            fontSize: this.chartTitleFt,
                            fontWeight: 'bolder',
                            color: '#ffea35'
                        }
                    },
                    tooltip: {
                        show: false,
                        trigger: 'item'
                    },
                    legend: {
                        show: false,
                        data: ['来源']
                    },
                    toolbox: {
                        show: false
                    },
                    series: [{
                        name: '来源',
                        type: 'pie',
                        radius: [0, '72%'],
                        itemStyle: {
                            normal: {
                                label: {
                                    show: true,
                                    formatter: "{b}\n{d}%",
                                    //position:'inner',
                                    textStyle: {
                                        //fontWeight: 'bold',
                                        fontSize: this.chartfontSize
                                    }
                                },
                                labelLine: {
                                    show: true,
                                    length: 30
                                }
                            },
                            emphasis: {
                                label: {
                                    show: false
                                }
                            }
                        },
                        data: [
                            { value: 0, name: '燃煤', itemStyle: { normal: { color: '#4f81bd', label: { textStyle: { color: '#4f81bd' } } } } },
                            { value: 0, name: '扬尘', itemStyle: { normal: { color: '#c0504d', label: { textStyle: { color: '#c0504d' } } } } },
                            { value: 0, name: '工业生产', itemStyle: { normal: { color: '#9bbb59', label: { textStyle: { color: '#9bbb59' } } } } },
                            { value: 0, name: '机动车', itemStyle: { normal: { color: '#8064a2', label: { textStyle: { color: '#8064a2' } } } } },
                            { value: 0, name: '其他', itemStyle: { normal: { color: '#4bacc6', label: { textStyle: { color: '#4bacc6' } } } } }
                        ]
                    }]
                };



                this.pm25Option = {
                    title: {
                        text: 'PM₂.₅组分构成',
                        x: 'center',
                        textAlign: 'center',
                        textStyle: {
                            fontSize: this.chartTitleFt,
                            fontWeight: 'bolder',
                            color: '#ffea35'
                        },
                        subtextStyle: {
                            fontSize: this.chartSubtFt,
                            fontWeight: 'bolder',
                            color: '#e1e2e6'
                        }
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        selectedMode: false,
                        data: ['氯化物(Cl⁻)', '硝酸盐(NO₃⁻)', '硫酸盐(SO₄²⁻)', '铵盐(NH₄⁺)',
                            '钠盐(Na⁺)', '钾盐(K⁺)', '钙盐(Ca²⁺)', '镁盐(Mg²⁺)', 'OC',
                            'EC', '元素'
                        ],
                        y: 'bottom',
                        itemWidth: this.chartfontSize,
                        itemHeight: this.chartfontSize,
                        textStyle: {
                            fontSize: this.chartfontSize,
                            //fontWeight:'bold',
                            color: '#e1e2e6'
                        }
                    },
                    toolbox: {
                        show: false
                    },
                    xAxis: [{
                        type: 'category',
                        boundaryGap: false,
                        data: [],
                        axisLabel: {
                            textStyle: {
                                fontSize: this.chartfontSize,
                                //fontWeight:'bold',
                                color: '#e1e2e6'
                            }
                        }
                    }],
                    yAxis: [{
                        name:'单位(μg/m³)',
                        nameTextStyle:{
                            fontSize: this.chartfontSize,
                                //fontWeight:'bold',
                                color: '#e1e2e6'
                        },
                        type: 'value',
                        axisLabel: {
                            formatter: '{value}',
                            textStyle: {
                                fontSize: this.chartfontSize,
                                //fontWeight:'bold',
                                color: '#e1e2e6'
                            }
                        }
                    }],
                    grid: {
                        x: 120,
                        y: this.chartTitleFt + this.chartSubtFt + 10,
                        x2: 10,
                        y2: this.chartfontSize * 2 + 50
                    },
                    series: [
                        {
                            name: '氯化物(Cl⁻)',
                            type: 'line',
                            stack: '总量',
                            symbol: 'circle',
                            smooth: true,
                            itemStyle: { normal: { color: lineColors[1], areaStyle: { color: lineColors[1] } } },
                            data: []
                        },
                        {
                            name: '硝酸盐(NO₃⁻)',
                            type: 'line',
                            stack: '总量',
                            symbol: 'circle',
                            smooth: true,
                            itemStyle: { normal: { color: lineColors[2], areaStyle: { color: lineColors[2] } } },
                            data: []
                        },
                        {
                            name: '硫酸盐(SO₄²⁻)',
                            type: 'line',
                            stack: '总量',
                            symbol: 'circle',
                            smooth: true,
                            itemStyle: { normal: { color: lineColors[3], areaStyle: { color: lineColors[3] } } },
                            data: []
                        },
                        {
                            name: '铵盐(NH₄⁺)',
                            type: 'line',
                            stack: '总量',
                            symbol: 'circle',
                            smooth: true,
                            itemStyle: { normal: { color: lineColors[4], areaStyle: { color: lineColors[4] } } },
                            data: []
                        },
                        {
                            name: '钠盐(Na⁺)',
                            type: 'line',
                            stack: '总量',
                            symbol: 'circle',
                            smooth: true,
                            itemStyle: { normal: { color: lineColors[5], areaStyle: { color: lineColors[5] } } },
                            data: []
                        },
                        {
                            name: '钾盐(K⁺)',
                            type: 'line',
                            stack: '总量',
                            symbol: 'circle',
                            smooth: true,
                            itemStyle: { normal: { color: lineColors[6], areaStyle: { color: lineColors[6] } } },
                            data: []
                        },
                        {
                            name: '钙盐(Ca²⁺)',
                            type: 'line',
                            stack: '总量',
                            symbol: 'circle',
                            smooth: true,
                            itemStyle: { normal: { color: lineColors[7], areaStyle: { color: lineColors[7] } } },
                            data: []
                        },
                        {
                            name: '镁盐(Mg²⁺)',
                            type: 'line',
                            stack: '总量',
                            symbol: 'circle',
                            smooth: true,
                            itemStyle: { normal: { color: lineColors[8], areaStyle: { color: lineColors[8] } } },
                            data: []
                        },
                        {
                            name: 'OC',
                            type: 'line',
                            stack: '总量',
                            symbol: 'circle',
                            smooth: true,
                            itemStyle: { normal: { color: lineColors[9], areaStyle: { color: lineColors[9] } } },
                            data: []
                        },
                        {
                            name: 'EC',
                            type: 'line',
                            stack: '总量',
                            symbol: 'circle',
                            smooth: true,
                            itemStyle: { normal: { color: lineColors[10], areaStyle: { color: lineColors[10] } } },
                            data: []
                        },
                        {
                            name: '元素',
                            type: 'line',
                            stack: '总量',
                            symbol: 'circle',
                            smooth: true,
                            itemStyle: { normal: { color: lineColors[11], areaStyle: { color: lineColors[11] } } },
                            data: []
                        }
                    ]
                };





            },


            startup: function() {
                topic.subscribe('contentResize', lang.hitch(this, this._onContentResize));
            },

            _initDisplayWidget: function() {
                this.widgetContainer = domConstruct.create('div', {
                    style: {
                        width: '100%',
                        height: '100%',
                        'background-color': '#162049'
                    }
                }, dom.byId(this.contentId));

                var conContainer = domConstruct.create('div', { 'class': 'bplz-widget-SourceAppMStatistics-conContainer' }, this.widgetContainer);
                domConstruct.create('div', { innerHTML: '时间：', 'class': 'bplz-widget-SourceAppMStatistics-dateLabel' }, conContainer);
                var dateTextBoxDiv = domConstruct.create('div', {}, conContainer);
                this.dateTextBox = new DateTextBox({ 'class': 'bplz-widget-SourceAppMStatistics-datebox', value: this.sDate }, dateTextBoxDiv);
                on(this.dateTextBox, 'change', lang.hitch(this, function(value) {
                    this.initCharts();
                    this.showTips();
                }));


                this.pm25Container = domConstruct.create('div', { 'class': 'bplz-widget-SourceAppMStatistics-content' }, this.widgetContainer);


                var pm25TopContainer = domConstruct.create('div', { 'class': 'bplz-widget-SourceAppMStatistics-topContainer' }, this.pm25Container);

                this.pie25ChartHeader = domConstruct.create('div', { 'class': 'bplz-widget-SourceAppMStatistics-pie25ChartHeader' }, pm25TopContainer);

                var pie25ChartContent = domConstruct.create('div', { 'class': 'bplz-widget-SourceAppMStatistics-pie25ChartContent' }, pm25TopContainer);

                var pie25ChartContainer = domConstruct.create('div', { 'class': 'bplz-widget-SourceAppMStatistics-pie25ChartContainer' }, pie25ChartContent);

                var pieChartDiv = domConstruct.create('div', { 'class': 'bplz-widget-SourceAppMStatistics-pieChartDiv' }, pie25ChartContainer);
                var pieSourceChartDiv = domConstruct.create('div', { 'class': 'bplz-widget-SourceAppMStatistics-pieChartDiv' }, pie25ChartContainer);

                this.pie1Chart = echarts.init(pieChartDiv);

                this.pie2Chart = echarts.init(pieSourceChartDiv);


                var pie25ChartTipDiv = domConstruct.create('div', { 'class': 'bplz-widget-SourceAppMStatistics-pie25ChartTipDiv' }, pie25ChartContent);
                this.pie25ChartTipContainer = domConstruct.create('div', { 'class': 'bplz-widget-SourceAppMStatistics-pie25ChartTipContainer' }, pie25ChartTipDiv);


                var bottomContainer = domConstruct.create('div', {
                    'class': 'bplz-widget-SourceAppMStatistics-bottomContainer'
                }, this.pm25Container);
                var pm25ChartDiv = domConstruct.create('div', { 'class': 'bplz-widget-SourceAppMStatistics-pm25ChartDiv' }, bottomContainer);
                this.pm25chart = echarts.init(pm25ChartDiv);

                var chartCanvas = this.pm25chart.dom.childNodes[0].childNodes[1];
                on(this.pm25chart.dom, 'click', lang.hitch(this, function(evt) {
                    var rect = chartCanvas.getBoundingClientRect();

                    var grid = this.pm25Option.grid;

                    var x = evt.clientX - rect.left * (chartCanvas.width / rect.width);
                    var y = evt.clientY - rect.top * (chartCanvas.height / rect.height);

                    var tStep = (chartCanvas.width - grid.x - grid.x2) / this.dayStep;

                    if (x >= grid.x && x <= chartCanvas.width - grid.x2 && y >= grid.y && y <= chartCanvas.height - grid.y2) {
                        this.pie25ChartTipContainer.innerHTML='';
                        var dateString = DateUtil.dateToStr('yyyy-MM-dd', this.dateTextBox.value);
                        var ct = (x-grid.x) / tStep;
                        ct = Math.floor(ct);
                        var cDate=DateUtil.dateAdd('d',-(this.dayStep - 1-ct),this.dateTextBox.value);
                        switch (ct) {
                            case 0:
                                this.pm25PieOption.series[0].data[0].value = this.config[dateString].pm25pie1[0];
                                this.pm25PieOption.series[0].data[1].value = this.config[dateString].pm25pie1[1];

                                this.pm25PieSourceOption.series[0].data[0].value = this.config[dateString].pm25piesource1[0];
                                this.pm25PieSourceOption.series[0].data[1].value = this.config[dateString].pm25piesource1[1];
                                this.pm25PieSourceOption.series[0].data[2].value = this.config[dateString].pm25piesource1[2];
                                this.pm25PieSourceOption.series[0].data[3].value = this.config[dateString].pm25piesource1[3];
                                this.pm25PieSourceOption.series[0].data[4].value = this.config[dateString].pm25piesource1[4];
                                break;
                            case 1:
                                this.pm25PieOption.series[0].data[0].value = this.config[dateString].pm25pie2[0];
                                this.pm25PieOption.series[0].data[1].value = this.config[dateString].pm25pie2[1];

                                this.pm25PieSourceOption.series[0].data[0].value = this.config[dateString].pm25piesource2[0];
                                this.pm25PieSourceOption.series[0].data[1].value = this.config[dateString].pm25piesource2[1];
                                this.pm25PieSourceOption.series[0].data[2].value = this.config[dateString].pm25piesource2[2];
                                this.pm25PieSourceOption.series[0].data[3].value = this.config[dateString].pm25piesource2[3];
                                this.pm25PieSourceOption.series[0].data[4].value = this.config[dateString].pm25piesource2[4];
                                break;
                            case 2:
                                this.pm25PieOption.series[0].data[0].value = this.config[dateString].pm25pie3[0];
                                this.pm25PieOption.series[0].data[1].value = this.config[dateString].pm25pie3[1];

                                this.pm25PieSourceOption.series[0].data[0].value = this.config[dateString].pm25piesource3[0];
                                this.pm25PieSourceOption.series[0].data[1].value = this.config[dateString].pm25piesource3[1];
                                this.pm25PieSourceOption.series[0].data[2].value = this.config[dateString].pm25piesource3[2];
                                this.pm25PieSourceOption.series[0].data[3].value = this.config[dateString].pm25piesource3[3];
                                this.pm25PieSourceOption.series[0].data[4].value = this.config[dateString].pm25piesource3[4];
                                break;
                        }
                        this.pie25ChartHeader.innerHTML = DateUtil.dateToStr('yyyy年MM月dd日', cDate);
                        this.pie1Chart.setOption(this.pm25PieOption, true);
                        this.pie2Chart.setOption(this.pm25PieSourceOption, true);
                        console.log(x, y);
                        this.showTips();
                    }


                }));


               

                this.initCharts();
                this.showTips();

            },
            showTips: function() {
                var v1 = this.pm25PieOption.series[0].data[0].value;
                var v2 = this.pm25PieOption.series[0].data[1].value;
                var p1 = Math.round(v1 / (v1 + v2) * 10000) / 100;
                var p2 = Math.round(v2 / (v1 + v2) * 10000) / 100;

                var v3 = this.pm25PieSourceOption.series[0].data[0].value;
                var v4 = this.pm25PieSourceOption.series[0].data[1].value;
                var v5 = this.pm25PieSourceOption.series[0].data[2].value;
                var v6 = this.pm25PieSourceOption.series[0].data[3].value;
                var v7 = this.pm25PieSourceOption.series[0].data[4].value;
                var p3 = Math.round(v3 / (v3 + v4 + v5 + v6 + v7) * 10000) / 100;
                var p4 = Math.round(v4 / (v3 + v4 + v5 + v6 + v7) * 10000) / 100;
                var p5 = Math.round(v5 / (v3 + v4 + v5 + v6 + v7) * 10000) / 100;
                var p6 = Math.round(v6 / (v3 + v4 + v5 + v6 + v7) * 10000) / 100;
                var p7 = Math.round(v7 / (v3 + v4 + v5 + v6 + v7) * 10000) / 100;

                var datas = lang.clone(this.pm25PieSourceOption.series[0].data);
                datas.sort(function(ob1, ob2) {
                    if (ob1.value > ob2.value) {
                        return -1;
                    } else if (ob1.value < ob2.value) {
                        return 1;
                    } else {
                        return 0;
                    }
                });

                var maxLabel = datas[0].name;

                this.pie25ChartTipContainer.innerHTML = 'PM<sub>2.5</sub>来源中，本地占比' + p1 +
                    '%，外地来源占比' + p2 + '%，<br>其中燃煤' + p3 + '%、扬尘' + p4 + '%、工业生产' + p5 + '%、机动车' + p6 +
                    '%、其他' + p7 + '%，' + maxLabel + '是最大的贡献源类。';

            },

            initCharts: function() {
                this.pie25ChartTipContainer.innerHTML='';
                var dateString = DateUtil.dateToStr('yyyy-MM-dd', this.dateTextBox.value);
                this.pie25ChartHeader.innerHTML = DateUtil.dateToStr('yyyy年MM月dd日', this.dateTextBox.value);
                var times = [];
                var cDate = DateUtil.dateAdd('d', -(this.dayStep - 1), this.dateTextBox.value);
                for (var i = 0; i < this.dayStep * 24; i++) {
                    var ctime = DateUtil.dateAdd('h', i, cDate);
                    times.push(DateUtil.dateToStr('yyyy-MM-dd HH', ctime));
                }
                this.pm25Option.title.text ='PM₂.₅组分构成  '+ times[0] + '至' + times[times.length - 1];
                this.pm25Option.xAxis[0].data = times;
                var precision=1000;
                if (this.config[dateString]) {
                    this.pm25PieOption.series[0].data[0].value = this.config[dateString].pm25pie3[0];
                    this.pm25PieOption.series[0].data[1].value = this.config[dateString].pm25pie3[1];

                    this.pm25PieSourceOption.series[0].data[0].value = this.config[dateString].pm25piesource3[0];
                    this.pm25PieSourceOption.series[0].data[1].value = this.config[dateString].pm25piesource3[1];
                    this.pm25PieSourceOption.series[0].data[2].value = this.config[dateString].pm25piesource3[2];
                    this.pm25PieSourceOption.series[0].data[3].value = this.config[dateString].pm25piesource3[3];
                    this.pm25PieSourceOption.series[0].data[4].value = this.config[dateString].pm25piesource3[4];

                    this.pm25Option.series[0].data = this.config[dateString].pm25lineCL.map(function(v){
                        return Math.round(v*precision)/precision;
                    });
                    this.pm25Option.series[1].data = this.config[dateString].pm25lineNO3.map(function(v){
                        return Math.round(v*precision)/precision;
                    });
                    this.pm25Option.series[2].data = this.config[dateString].pm25lineSO4.map(function(v){
                        return Math.round(v*precision)/precision;
                    });
                    this.pm25Option.series[3].data = this.config[dateString].pm25lineNH4.map(function(v){
                        return Math.round(v*precision)/precision;
                    });
                    this.pm25Option.series[4].data = this.config[dateString].pm25lineNa.map(function(v){
                        return Math.round(v*precision)/precision;
                    });
                    this.pm25Option.series[5].data = this.config[dateString].pm25lineK.map(function(v){
                        return Math.round(v*precision)/precision;
                    });
                    this.pm25Option.series[6].data = this.config[dateString].pm25lineCa.map(function(v){
                        return Math.round(v*precision)/precision;
                    });
                    this.pm25Option.series[7].data = this.config[dateString].pm25lineMg.map(function(v){
                        return Math.round(v*precision)/precision;
                    });
                    this.pm25Option.series[8].data = this.config[dateString].pm25lineOC.map(function(v){
                        return Math.round(v*precision)/precision;
                    });
                    this.pm25Option.series[9].data = this.config[dateString].pm25lineEC.map(function(v){
                        return Math.round(v*precision)/precision;
                    });
                    this.pm25Option.series[10].data = this.config[dateString].pm25lineY.map(function(v){
                        return Math.round(v*precision)/precision;
                    });
                }else{
                    this.pm25PieOption.series[0].data[0].value = 0;
                    this.pm25PieOption.series[0].data[1].value = 0;

                    this.pm25PieSourceOption.series[0].data[0].value = 0;
                    this.pm25PieSourceOption.series[0].data[1].value = 0;
                    this.pm25PieSourceOption.series[0].data[2].value = 0;
                    this.pm25PieSourceOption.series[0].data[3].value = 0;
                    this.pm25PieSourceOption.series[0].data[4].value = 0;

                    var datas=times.map(function(v){
                        return '-';
                    });

                    this.pm25Option.series[0].data =datas; 
                    this.pm25Option.series[1].data = datas;
                    this.pm25Option.series[2].data = datas;
                    this.pm25Option.series[3].data = datas;
                    this.pm25Option.series[4].data = datas;
                    this.pm25Option.series[5].data = datas;
                    this.pm25Option.series[6].data = datas;
                    this.pm25Option.series[7].data = datas;
                    this.pm25Option.series[8].data = datas;
                    this.pm25Option.series[9].data = datas;
                    this.pm25Option.series[10].data = datas;
                }

                this.pie1Chart.setOption(this.pm25PieOption, true);
                this.pie2Chart.setOption(this.pm25PieSourceOption, true);
                this.pm25chart.setOption(this.pm25Option, true);
            },

            _onContentResize: function() {
                if (this.state == 'closed') {
                    return;
                }
                if (this.pie1Chart) {
                    this.pie1Chart.resize();
                }
                if (this.pie2Chart) {
                    this.pie2Chart.resize();
                }
                if (this.pm25chart) {
                    this.pm25chart.resize();
                }


            },

            onOpen: function() {
                if (this.widgetContainer) {
                    domStyle.set(this.widgetContainer, 'display', 'block');
                    this._onContentResize();
                }
            },
            _showMainLoading: function() {
                if (this.mainLoading) {
                    this.mainLoading.destroy();
                }
                this.mainLoading = new LoadingShelter();
                this.mainLoading.placeAt('main-page');
                this.mainLoading.startup();
            },
            _hideMainLoading: function() {
                if (this.mainLoading) {
                    this.mainLoading.destroy();
                }
            },
            onClose: function() {
                if (this.widgetContainer) {
                    domStyle.set(this.widgetContainer, 'display', 'none');
                }
            },
            _showError: function(title, message, error) {
                if (title == null) {
                    title = '发生错误';
                }
                BpAlert.show(title, message, error);
            }

        });

    });