define([
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dojo/_base/array',
    'dojo/_base/html',
    'dojo/topic',
    'dojo/aspect',
    'dojo/Deferred',
    'dojo/query',
    'dojo/NodeList-dom',
    'dojo/NodeList-manipulate',

    'dojo/on',
    'dojo/dom',
    'dojo/cookie',
    'dojo/dom-construct',
    'dojo/dom-geometry',
    'dojo/dom-style',
    'dijit/registry',
    'bplz/BaseWidget',
    'bplz/PoolControllerMixin',
    'bplz/TaskManager/WarningQueryTask',
    'bplz/TaskManager/ImageQueryTask',
    'bplz/utils',
    'bplz/utils/DateUtil',
    'dijit/Tooltip',
    'bplz/dijit/Popup',
    './PopupTileNodes',
    './h2c',
    './CatchScreenSetting'
  ],
  function(declare, lang, array, html, topic, aspect, Deferred, query, nld, nlm, on, dom, cookie,
    domConstruct, domGeometry, domStyle, registry, BaseWidget, PoolControllerMixin, WarningQueryTask, ImageQueryTask,
    utils, DateUtil, Tooltip, Popup, PopupTileNodes, h2c, CatchScreenSetting) {
    /* global jimuConfig */
    /* jshint scripturl:true */
    var clazz = declare([BaseWidget, PoolControllerMixin], {

      baseClass: 'bplz-widget-header-controller bplz-main-bgcolor',

      maxIconCount: -1,

      //whether need to create more icon
      createMoreIcon: false,

      //title, links are switchable depends the browser width
      switchableElements: {},

      //the default height of the widget
      height: 40,
      width: 100,
      logoHeight: 60,

      //the opened group/widget's id
      openedId: '',
      hasLoadedLeftController: false,

      leftControllerConfigs: [],
      currLeftControllerId: "",
      loadedLeftController: [],
      currSelectedTabIdx: 0,
      nonLeftPanel: [],

      postCreate: function() {
        this.inherited(arguments);

        this.switchableElements.links = this.linksNode;

        if (this.position && this.position.height) {
          this.height = this.position.height;
        }

        if (!this.appConfig.portalUrl) {
          html.setStyle(this.signInSectionNode, 'display', 'none');
        } else {
          html.setStyle(this.signInSectionNode, 'display', '');
        }

        html.setAttr(this.logoNode, 'src', this.appConfig.logo ? this.appConfig.logo : this.folderUrl + 'images/app-logo.png');
        // this.switchableElements.title.innerHTML = this.appConfig.title ? this.appConfig.title : '';
        // this.switchableElements.subtitle.innerHTML = this.appConfig.subtitle ? this.appConfig.subtitle : '';

        this._setElementsSize();
        this.autoSignIn();
      },

      startup: function() {
        this.inherited(arguments);
        this.queryWarningTask = new WarningQueryTask(this.appConfig.restApiServerUrl.url);
        this.imageQueryTask = new ImageQueryTask(this.appConfig.restApiServerUrl.url);
        // var dtStr = DateUtil.dateToStr("yyyy-MM-dd 20:00:00", DateUtil.dateAdd('d', -1, new Date()));
        // this.getForecastWarningInfo();
        //发布
        // if (!this.appConfig['prjInfo']['publishManagerInfo']['Show']) {
        //   this.publishManager.style['display'] = 'none';
        //   this.publish.style['display'] = 'none';
        // }


        var def = this._createLeftController();
        def.then(lang.hitch(this, function(res) {
          if (res) {
            this.timeoutHandle = setTimeout(lang.hitch(this, this.resize), 100);
            this._initLeftControllerContainer();
          }
        }), lang.hitch(this, function() {

        }));
      },

      _initLeftControllerContainer: function() {
        var allIconConfigs = this.getAllConfigs();
        var leftController = this.getLeftControllerConfig();
        var showConfigs = [];
        for (i = 0; i <= allIconConfigs.length - 1; i++) {
          iconConfig = allIconConfigs[i];
          if (iconConfig.roleIds && iconConfig.roleIds.indexOf(this.userInfo.role_id) == -1)
            continue;
          iconConfig.idx = i;
          showConfigs.push(iconConfig);
          var leftShow = true;
          if (iconConfig.hasLeft != undefined && !iconConfig.hasLeft)
            leftShow = false;
          if (leftController) {
            var leftControllerConfig = lang.clone(leftController);
            if (leftControllerConfig.uri) {
              leftControllerConfig.hasConfig = false;
              leftControllerConfig.hasLocale = false;
              leftControllerConfig.id = leftControllerConfig.id + "_" + i;
              leftControllerConfig.show = leftShow;
              this.leftControllerConfigs.push(leftControllerConfig);
            }
          }
        }

        this.leftControllerContainer.init(this.leftControllerConfigs, showConfigs);
      },

      getForecastWarningInfo: function(dateStr) {
        var def = this.queryWarningTask.GetWarningInfoByDate();
        def.then(lang.hitch(this, function(res) {
          if (res && res.length > 0) {
            dom.byId("gradeImg").src = "widgets/HeaderController/images/has.png";

            dom.byId("warningInfo").innerHTML = "有预警";
          }
        }), lang.hitch(this, function(err) {}));
      },

      _getWarningInfoDiv: function(grade, pollutant, city, population, area, dateStr) {
        var infoStr = "<div style='width:200px'><div style='text-align: center;width:100%; font-size: 15px; font-weight: bold; '>" + grade + "(" + pollutant + ")</div>" + "<div><span style='font-weight: bold;'>起止时间：</span>" + dateStr + "</div>" + "<div><span style='font-weight: bold;'>影响城市：</span>" + city + "</div>" + "<div><span style='font-weight: bold;'>影响人口：</span>" + population + "万</div>" + "<div ><span style='font-weight: bold;'>影响面积：</span>" + area + "万平方公里</div>";
        infoStr += "</div>";
        return infoStr;
      },


      _onPrintScreenClick: function() {
        var content = new CatchScreenSetting();
        content.startup();

        var popup = new Popup({
          content: content.domNode,
          titleLabel: "图片收藏",
          width: "400",
          height: "320",
          buttons: [{
            label: "保存",
            onClick: lang.hitch(this, function() {
              var catchNode = content.catchArea == "main" ? this.contentId : document.body;
              this.imgName = content.getImgName();
              popup.close();

              setTimeout(lang.hitch(this, function() {
                html2canvas(dom.byId(catchNode), {
                  onrendered: lang.hitch(this, this.catchScrn)
                });
              }), 300);

            })
          }, {
            label: "取消",
            onClick: lang.hitch(this, function() {
              // content.destroy();
              popup.close();
            })
          }]
        });
      },

      catchScrn: function(canvas) {

        var base64Data = canvas.toDataURL("image/png");
        var params = {
          base64: base64Data.split(',')[1],
          title: this.imgName,
          userId: this.userInfo.id
        };
        // console.log(base64Data);
        var def = this.imageQueryTask.UploadImageToServer(params);
        def.then(lang.hitch(this, function(res) {
          if (res == null)
            console.log("error");
          else {
            // console.log(res);
            topic.publish("addImgItemToList", res);
          }
        }), lang.hitch(this, function() {
          console.log("error");
        }));
      },



      autoSignIn: function() {
        //html.setStyle(this.signinLinkNode, 'display', 'none');
        html.setStyle(this.userNameLinkNode, 'display', '');
        html.setStyle(this.signoutLinkNode, 'display', '');
        this.userNameLinkNode.innerHTML = "您好，" + this.userInfo.name;
      },

      resize: function() {
        var box = html.getContentBox(this.domNode);
        this._showSwitchableElements(['title', 'links', 'subtitle']);
        this._createIconNodes(box);
        if (this.morePane) {
          html.setStyle(this.morePane.domNode, utils.getPositionStyle(this._getMorePanelSize()));
          this.morePane.resize();
        }
        if (this.popupLinkNode) {
          html.setStyle(jimuConfig.layoutId, {
            left: html.getContentBox(this.popupLinkNode).w + 'px'
          });
        }
      },

      destroy: function() {
        if (this.timeoutHandle) {
          clearTimeout(this.timeoutHandle);
          this.timeoutHandle = null;
        }
        if (this.morePane) {
          this.morePane.destroy();
        }
        this.inherited(arguments);
      },

      onAppConfigChanged: function(appConfig, reason, changedData) {
        switch (reason) {
          case 'attributeChange':
            this._onAttributeChange(appConfig, changedData);
            break;
          default:
            return;
        }
        this.resize();
      },

      getOpenedIds: function() {
        this.inherited(arguments);
        if (this.openedId === '') {
          return [];
        }
        return [this.openedId];
      },

      setOpenedIds: function(ids) {
        if (ids.length === 0) {
          return;
        }
        this.openedId = ids[0];
        var config = this.getConfigById(this.openedId);
        if (!config) {
          return;
        }
        if (config.widgets && config.openType === 'openAll') {
          this._showIconContent(config);
        } else if (!config.widgets) {
          this._showIconContent(config);
        }
      },

      _highLight: function(node) {
        if (this.hlDiv) {
          this._removeHighLight();
        }
        if (!node) {
          return;
        }
        var position = domGeometry.getMarginBox(node);
        var hlStyle = {
          position: 'absolute',
          left: (position.l) + 'px',
          top: (position.t) + 'px',
          width: (position.w) + 'px',
          height: (position.h) + 'px',
          backgroundColor: 'rgba(232, 75, 75, 0.4)',
          border: '2px solid #e84b4b',
          zIndex: 999
        };
        this.hlDiv = domConstruct.create('div', {
          style: hlStyle
        }, node, 'before');
      },

      _removeHighLight: function() {
        if (this.hlDiv) {
          domConstruct.destroy(this.hlDiv);
          this.hlDiv = null;
        }
      },

      _onAttributeChange: function(appConfig, changedData) {
        if (changedData.title !== undefined && changedData.title !== this.appConfig.title) {
          this.titleNode.innerHTML = changedData.title;
        }
        if (changedData.subtitle !== undefined && changedData.subtitle !== this.appConfig.subtitle) {
          this.subtitleNode.innerHTML = changedData.subtitle;
        }
        if (changedData.logo) {
          html.setAttr(this.logoNode, 'src', changedData.logo);
        }
        if (changedData.links) {
          this._createDynamicLinks(changedData.links);
        }
      },

      _setElementsSize: function() {
        html.setStyle(this.logoNode, {
          height: this.logoHeight + 'px',
          minWidth: '30px',
          marginTop: ((this.height - this.logoHeight) / 2) + 'px'
        });

        query('.link', this.domNode).style({
          lineHeight: '32px'
        });
      },

      _createDynamicLinks: function(links) {
        html.empty(this.dynamicLinksNode);
        array.forEach(links, function(link) {
          html.create('a', {
            href: link.url,
            target: '_blank',
            innerHTML: link.label,
            'class': "link",
            style: {
              lineHeight: this.height + 'px'
            }
          }, this.dynamicLinksNode);
        }, this);
      },

      _showSwitchableElements: function(showElement) {
        var es = this.switchableElements;
        for (var p in es) {
          if (es.hasOwnProperty(p)) {
            if (showElement.indexOf(p) > -1) {
              html.setStyle(es[p], 'display', 'block');
              es[p].visible = true;
            } else {
              html.setStyle(es[p], 'display', 'none');
              es[p].visible = false;
            }
          }
        }
      },
      _onPublishManagerClick: function() {
        if (this.userInfo.edit == 0) {
          var popup = new Popup({
            content: "当前用户没有发布预报预警信息权限",
            titleLabel: "提示",
            width: "300",
            height: "200",
            buttons: [{
              label: "确认",
              onClick: lang.hitch(this, function() {
                popup.close();
              })
            }]
          });
        } else {
          window.open(this.appConfig["prjInfo"]["publishManagerInfo"]["publishManagerURL"] + "?userId=" + this.userInfo.id);
        }
      },

      _onSignoutClick: function() {
        cookie('userInfo', null, {
          expires: -1
        });
        location.reload();
      },

      _onUserNameClick: function() {

      },

      _getHeaderSectionWidth: function() {
        var width;
        width = html.getMarginBox(this.headerNode).w;
        return width;
      },

      _getSigninSectionWidth: function() {
        var width;
        width = html.getMarginBox(this.signInSectionNode).w;
        return width;
      },

      _getContainerWidth: function(box) {
        var headSectionWidth = this._getHeaderSectionWidth();
        var containerWidth = box.w - headSectionWidth - this._getEmptyWidth(box) - this._getSigninSectionWidth();
        return containerWidth;
      },

      _calcContainerAndEmptyWidth: function(box) {
        var containerWidth = this._getContainerWidth(box);
        var emptyWidth = this._getEmptyWidth(box);
        //here, we need put at least two icons
        if (containerWidth < this.iconWidth * 2) {

          //hiden the title, subtitle, links
          this._showSwitchableElements([]);
          containerWidth = this._getContainerWidth(box);
          if (containerWidth < this.iconWidth * 2) {
            //all of the elements is hidden, but the it's still can hold two icons(too small screen???),
            //use the empty space
            //the emptyWidth may be negative
            emptyWidth = emptyWidth - (this.iconWidth * 2 - containerWidth);
            containerWidth = this.iconWidth * 2;
          }

        }
        // console.log('containerWidth: %f, emptyWidth: %f', containerWidth, emptyWidth);
        // 
        if (emptyWidth > 100) {
          containerWidth = containerWidth + emptyWidth - 100;
          emptyWidth = 100;

        }
        return {
          containerWidth: containerWidth,
          emptyWidth: 100 //emptyWidth
        };
      },

      _getEmptyWidth: function(box) {
        return 1 / 10 * box.w;
      },

      _createIconNodes: function(box) {
        html.empty(this.containerNode);
        this.leftControllerConfigs = [];

        var i, iconConfig, allIconConfigs = this.getAllConfigs();
        //by default, the icon is square
        this.iconWidth = this.width; // box.h;

        var ret = this._calcContainerAndEmptyWidth(box);


        html.setStyle(this.containerNode, {
          width: ret.containerWidth + 'px',
          marginLeft: (ret.emptyWidth - 5) + 'px' //add some margein to avoid mess layout
        });

        this.maxIconCount = Math.floor(ret.containerWidth / this.iconWidth);
        if (this.maxIconCount >= allIconConfigs.length) {
          this.headerIconCount = allIconConfigs.length;
          this.createMoreIcon = false;
        } else {
          this.headerIconCount = this.maxIconCount - 1;
          this.createMoreIcon = true;
        }

        var showConfig = [];
        var idx = 0;
        var leftController = this.getLeftControllerConfig();
        for (i = 0; i <= allIconConfigs.length - 1; i++) {
          iconConfig = allIconConfigs[i];
          if (iconConfig.roleIds && iconConfig.roleIds.indexOf(this.userInfo.role_id) == -1)
            continue;
          iconConfig.idx = idx++;

          showConfig.push(iconConfig);

          var createSplitLine = true;
          if (this.headerIconCount - 1 == i && !this.createMoreIcon)
            createSplitLine = false;
          if (i <= this.headerIconCount - 1)
            this._createIconNode(iconConfig, createSplitLine);

          var leftShow = true;
          if (iconConfig.hasLeft != undefined && !iconConfig.hasLeft)
            leftShow = false;
        }

        if (this.createMoreIcon) {
          this._createIconNode({
            label: '更多'
          }, false);
        }

        query('.icon-node', this.domNode).removeClass('bplz-state-selected');
        var nodes = query('.icon-node', this.domNode);
        if (this.currSelectedTabIdx >= nodes.length) {
          html.addClass(nodes[nodes.length - 1], 'bplz-state-selected');

        } else
          html.addClass(query('.icon-node', this.domNode)[this.currSelectedTabIdx], 'bplz-state-selected');

        this._clearSplitLine();
        // if (!this.hasLoadedLeftController) {
        //   if (this.leftControllerConfigs.length > 0) {
        //     this._showLeftController(this.leftControllerConfigs[0], showConfig[0]);
        //   }
        // }
      },

      _createLeftController: function() {
        var def = new Deferred();
        var leftControllerContainerConfig = this.getLeftControllerContainerConfig();
        if (leftControllerContainerConfig) {
          if (leftControllerContainerConfig.uri) {
            leftControllerContainerConfig.hasConfig = false;
            leftControllerContainerConfig.hasLocale = false;
          }

          this.widgetManager.loadWidget(leftControllerContainerConfig).then(lang.hitch(this, function(widget) {
            if (widget.panel.positionRelativeTo === 'content') {
              html.place(widget.domNode, this.contentId);
            } else {
              html.place(widget.domNode, jimuConfig.layoutId);
            }
            html.setStyle(widget.domNode, utils.getPositionStyle(widget.position));
            html.setStyle(widget.domNode, 'position', 'absolute');

            try {
              widget.startup();
            } catch (err) {
              console.log(console.error('fail to startup widget ' + widget.name + '. ' + err.stack));
            }
            this.leftControllerContainer = widget;
            def.resolve(true);
          }), function(err) {
            def.reject(err);
          });

        } else
          def.resolve(null);
        return def;
      },

      _getWidgetById: function(id) {
        var ret;
        array.some(this.loadedLeftController, function(w) {
          if (w.id === id) {
            ret = w;
            return true;
          }
        }, this);
        return ret;
      },


      _showLeftController: function(controllerConfig, config) {
        this.hasLoadedLeftController = true;
        if (controllerConfig.id == this.currLeftControllerId)
          return;
        var pWidget = this._getWidgetById(this.currLeftControllerId);
        if (pWidget) {
          if (pWidget.currentTab && pWidget.currentTab.panel)
            pWidget.panelManager.closePanel(pWidget.currentTab.panel, true);
          if (pWidget.tabs.length > 0)
            pWidget.tabs[pWidget.lastSelectedIndex].selected = false;
          //pWidget.domNode.style.display = "none";
          //pWidget.domNode.style.opacity = 0;
          //this.widgetManager.closeWidget(pWidget);
        }

        array.forEach(this.nonLeftPanel, function(panel) {
          if (panel.state !== 'closed') {
            this.panelManager.closePanel(panel, false); //关闭无左侧控制栏panel
          }
        }, this);

        if (!controllerConfig.show) //无左侧控制栏
        {
          domStyle.set(this.contentId, 'left', 0);
          this.currLeftControllerId = controllerConfig.id;
          this.panelManager.showPanel(config.widgets[0]).then(lang.hitch(this, function(panel) {
            if (array.indexOf(this.nonLeftPanel, panel) === -1) {
              this.nonLeftPanel.push(panel);
            }
            domConstruct.place(panel.domNode, this.contentId);
            query('.bplz-widget-frame', panel.domNode)[0].style.width = "100%"; //
            domConstruct.place(this.contentId, jimuConfig.layoutId, "last");
          }));
          return false;
        } else {
          domStyle.set(this.contentId, 'left', this.appConfig.content.position.left + "px");
          this.currLeftControllerId = controllerConfig.id;
          var widget = this._getWidgetById(this.currLeftControllerId);
          if (widget) {
            //html.setStyle(widget.domNode, 'display', 'block');
            // domConstruct.place(widget.domNode, jimuConfig.layoutId, "last");
            // 
            domConstruct.place(widget.domNode, this.leftControllerContainer.domNode, "last");

            widget.selectTab(widget.lastSelectedIndex);
            return;
          }
          var def = new Deferred();
          this.widgetManager.loadWidget(controllerConfig).then(lang.hitch(this, function(widget) {
            if (widget.panel.positionRelativeTo === 'content') {
              html.place(widget.domNode, this.contentId);
            } else {
              domConstruct.place(widget.domNode, this.leftControllerContainer.domNode, "last");
              // html.place(widget.domNode, jimuConfig.layoutId);
            }
            html.setStyle(widget.domNode, utils.getPositionStyle(widget.position));
            // html.setStyle(widget.domNode, 'position', 'absolute');

            //获取当前左侧控制器控制的widget信息
            // var config = this.getAllConfigs();
            widget.controlledGroups = [config.label];

            try {
              widget.startup();
            } catch (err) {
              console.log(console.error('fail to startup widget ' + widget.name + '. ' + err.stack));
            }
            widget.configId = controllerConfig.id;
            this.loadedLeftController.push(widget);
            def.resolve(widget);
          }), function(err) {
            def.reject(err);
          });
          return def;
        }
      },

      _createIconNode: function(iconConfig, createSplitLine) {
        // if (iconConfig.name == "管理" && this.userInfo.role_id != 0) {

        //   return; //非管理员则不加载管理模块
        // }
        var node, iconUrl;
        if (iconConfig.label === '更多') {
          iconUrl = this.folderUrl + 'images/more_icon.png';
        } else {
          iconUrl = iconConfig.icon;
        }

        node = html.create('div', {
          'class': 'icon-node',
          settingId: iconConfig.id,
          style: {
            width: this.width + 'px',
            height: this.height + 'px'
          }
        }, this.containerNode);

        var menuDiv = html.create('div', {
          // 'class': 'icon-node',
          style: {
            height: "100%",
            textAlign: "center"
          }
        }, node);


        html.create('img', {
          src: iconUrl,
          style: {
            marginTop: '20px'
          }
        }, menuDiv);

        html.create('label', {
          innerHTML: iconConfig.label,
          style: {
            //marginTop: ((this.height - 24) / 2) + 'px',
            width: this.width + 'px',
            // lineHeight: this.height + 'px',
            display: 'inline-block',
            fontSize: '14px',
            color: '#FFF',
            cursor: 'pointer'
          }
        }, menuDiv);

        if (createSplitLine)
          html.create('div', {
            "class": 'split-line'
          }, this.containerNode);

        if (iconConfig.label === '更多') {
          on(node, 'click', lang.hitch(this, this._showMorePane, iconConfig));
        } else {
          on(node, 'click', lang.hitch(this, this._onIconNodeClick, node));
        }
        node.config = iconConfig;
        return node;
      },

      _onIconNodeClick: function(node) {
        var label = node.config.label;
        var idx = node.config.idx;
        this.currSelectedTabIdx = idx;

        query('.icon-node', this.domNode).removeClass('bplz-state-selected');
        html.addClass(node, 'bplz-state-selected');
        if (node.config.name && node.config.name == "决策") {
          topic.publish('openPredictionTable');
        } else {
          // this._showLeftController(this.leftControllerConfigs[idx], node.config);
          this.leftControllerContainer.showController(idx);
        }
        this._clearSplitLine();
      },

      _clearSplitLine: function() {

        var splitLines = query('.split-line', this.domNode);
        array.forEach(splitLines, function(s) {
          domStyle.set(s, 'display', '');
        }, this);

        var node = query('.bplz-state-selected', this.domNode)[0];
        if (node) {
          var nextSplitLine = node.nextSibling;
          var preSplitLine = node.previousSibling;
          if (nextSplitLine) {
            domStyle.set(nextSplitLine, 'display', 'none');
          }
          if (preSplitLine) {
            domStyle.set(preSplitLine, 'display', 'none');
          }
        }
      },

      _createDropTriangle: function(node) {
        var box = html.getMarginBox(node);
        var triangleLeft = box.l + box.w / 2 - 4;
        html.create('div', {
          'class': 'drop-triangle',
          style: {
            left: triangleLeft + 'px'
          }
        }, node);
      },



      _getIconNodeById: function(id) {
        var node = query('.icon-node[settingId="' + id + '"]', this.domNode);
        if (node.length === 0) {
          return;
        }
        return node[0];
      },

      _onPanelClose: function(id) {
        query('.icon-node[settingId="' + id + '"]', this.domNode).removeClass('bplz-state-selected');
        this.openedId = '';
      },



      _showIconContent: function(iconConfig) {
        this.panelManager.showPanel(iconConfig).then(lang.hitch(this, function(panel) {
          this.openedId = iconConfig.id;
          this.own(aspect.after(panel, 'onClose', lang.hitch(this, function() {
            this._onPanelClose(iconConfig.id);
          })));
        }));
      },

      _showMorePane: function() {
        var i, iconConfig, moreItems = [],
          allIconConfigs = this.getAllConfigs();

        for (i = this.headerIconCount; i < allIconConfigs.length; i++) {
          iconConfig = allIconConfigs[i];


          if (iconConfig.roleIds && iconConfig.roleIds.indexOf(this.userInfo.role_id) == -1)
            continue;

          moreItems.push(iconConfig);
        }
        if (this.morePane) {
          this.morePane.destroy();
        }
        if (this.moreIconPaneCoverNode) {
          html.destroy(this.moreIconPaneCoverNode);
        }
        this.morePane = new PopupTileNodes({
          openedId: this.openedId,
          items: moreItems
        });
        this._createCoverNode();
        html.place(this.morePane.domNode, jimuConfig.contentId);
        html.setStyle(this.morePane.domNode, utils.getPositionStyle(this._getMorePanelSize()));
        this.morePane.startup();

        aspect.after(this.morePane, 'onNodeClicked', lang.hitch(this, function(node) {
          // this._moveConfigToHeader(node.config);
          // this._createIconNodes(html.getContentBox(this.domNode));
          // this._onIconClick(this._getIconNodeById(node.config.id));

          this._onIconNodeClick(node);
        }), true);
        aspect.after(this.morePane, 'hide', lang.hitch(this, function() {
          html.destroy(this.moreIconPaneCoverNode);
        }), true);
      },

      _moveConfigToHeader: function(config) {
        var allIconConfigs = this.getAllConfigs();

        var tempIndex = config.index;
        config.index = allIconConfigs[this.headerIconCount - 1].index;
        allIconConfigs[this.headerIconCount - 1].index = tempIndex;
      },

      _createCoverNode: function() {
        this.moreIconPaneCoverNode = html.create('div', {
          'class': 'bplz-more-icon-cover'
        }, jimuConfig.layoutId);
      },

      _getMorePanelSize: function() {
        var mapBox, minLen, position;
        mapBox = html.getContentBox(jimuConfig.contentId);
        minLen = Math.min(mapBox.w, mapBox.h);
        if (minLen < 600) {
          if (mapBox.w < mapBox.h) {
            position = {
              left: 20,
              right: 20,
              top: (mapBox.h - (mapBox.w - 40)) / 2,
              height: mapBox.w - 40,
              width: '',
              bottom: ''
            };
          } else {
            position = {
              top: 20,
              bottom: 20,
              left: (mapBox.w - (mapBox.h - 40)) / 2,
              width: mapBox.h - 40,
              height: '',
              right: ''
            };
          }
        } else {
          position = {
            top: (mapBox.h - 560) / 2,
            left: (mapBox.w - 560) / 2,
            width: 560,
            height: 560,
            right: '',
            bottom: ''
          };
        }
        return position;
      }
    });
    return clazz;
  });